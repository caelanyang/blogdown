<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Translate on Hugo Ivy</title>
    <link>/tags/translate/</link>
    <description>Recent content in Translate on Hugo Ivy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 Sep 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/translate/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解 Android 中的 Application 类</title>
      <link>/post/2016/09/18/2016-09-18/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/09/18/2016-09-18/</guid>
      <description>概述 在 Android 中，Application 类是 APP 的基础类，它包含了 APP 中其他的所有组件，如 Activity 和 Service 等。Application 或 Application 的子类在 APP 被创建的时候会先于其他的类被实例化。
这个类主要用于在第一个 Activity 显示之前初始化应用的全局状态。需要注意的是，要谨慎使用自定义的 Application 类，因为通常情况下是没有必要的。
自定义 Application 类 在很多应用中都是不需要直接使用 Application 类的。然而，自定义的 Application 类有以下几个可被接受的的用途：
 运行需要在第一个 Activity 创建之前执行的任务 需要在所有组件之间共享的全局初始化（比如崩溃报告，持久化） 访问静态不可变数据的静态方法，比如共享的网络客户端对象  注意不要在 Application 对象中存储可变的共享数据，因为这样的数据可能会随时消失或变为无效。相反的，这时候应该使用持久化策略存储可变的共享数据，比如 File，SharedPreferences，或 SQLite 等持久化方法。
如何定义 Application 类 要自定义 Application 类，首先创建一个继承 android.app.Application 的新类。如下：
import android.app.Application; public class MyApplication extends Application { // Called when the application is starting, before any other application objects have been created.</description>
    </item>
    
    <item>
      <title>使用ProGuard缩减代码和资源以及混淆代码(谷歌文档翻译)</title>
      <link>/post/2016/06/10/2017-06-10/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/06/10/2017-06-10/</guid>
      <description>缩减你的代码和资源 为了让 APK 文件尽可能的小，在 release build 中应当使用缩减(shrink)来移除那些没有用到的代码和资源文件。这篇文章将描述怎样完成缩减，以及在 build (构建)的过程中，如何指定哪些代码和资源应该保留而哪些应该抛弃。
代码缩减可以通过 ProGuard（混淆器）实现，ProGuard 会从打包的 APP 以及 APP 包含的代码库之中检测然后移除那些未使用的类文件、字段、方法和属性(它也因此在使用权宜之计解决64K引用限制 64K reference limit 的问题方面，成为了一个有价值的工具)。ProGuard 也可以优化字节码(bytecode)，移除没用过的代码指令，并且通过使用简短名字混淆了保留的类文件、字段和方法。被混淆过的代码能够让你的 APK 很难被反向工程，特别是当你的 APP 使用了诸如授权验证 (licensing verification) 等对安全性敏感的功能时，这一点将非常的有用。
资源的缩减可以通过 Android 的 Gradle 插件实现，这个插件可以从打包的 APP 里面移除那些没有使用过的资源文件，包括代码库中没有使用过的资源文件。它与代码缩减以这样的方式协同工作：一旦没使用过的代码被移除，那些相对应的不再被引用的资源文件也将被安全的移除。
这个文档中的功能依赖于： - SDK Tools 25.0.10 或者更高版本 - Android Plugin for Gradle 2.00 或者更高版本
缩减你的代码 要通过 ProGuard 实现代码缩减，需要在 build.gradle 文件里，向合适的 build type (构建类型)中添加 minifyEnabled true 语句。
需要注意的是，代码缩减会增加项目构建(build)的时间,所以如果可能的话，要尽量避免在调试的构建(debug build)中使用它。 然而在用于测试的最终APK中使用代码缩减是很重要的，因为你如果没有充分地去自定义哪些代码需要保留，它将会引入一些 bug (introduce bugs)。
例如，下面来自于 build.gradle 文件中的代码片段，实现了 release build (发布构建)时的代码缩减：</description>
    </item>
    
  </channel>
</rss>